
import { setting } from "setting.slint";
import { MusicList } from "list.slint";
import { user-main } from "user.slint";
import { homepage } from "homepage.slint";
import { MusicLib } from "MusicLib.slint";
import { SideBar } from "SideBar.slint";
import { SettingValue,UserSetting } from "user.slint";
import { Login,SignData } from "Login.slint";
import { musiclistdata } from "list.slint";
import { CardList } from "card.slint";
import { play_list_values,PlayList } from "playlist.slint";
export struct UserSettingData {
    name:string,
    gender:string,
    intro:string,
    age:string,
    avatar-path:string
}
//import { BorderlessWindow } from "borderless-window.slint";
import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox, TabWidget,
    AboutSlint,Slider
, Slider} from "std-widgets.slint";

import "../assets/fonts/fangzheng.ttf";
export component Select inherits ComboBox {

        y: 30px;
        width: self.preferred-width;
        height: self.preferred-height;

        current-value: "first";
    
}
export component Close {
    Image {
        source: @image-url("../assets/icon/xmark.svg");
        width: 15px;
        //colorize: area.has-hover ? #29292984 : #ffffff;
        colorize: #ffffff;

        // animate colorize {
        //     duration: 250ms;
        // }
        
    }
    
}
export component setvolume {
    in-out property <int> volume:50;
    callback setvolume(int);
    Rectangle {
        height: 140px;
        width: 20px;
        Text{
            text: volume;
            y:0;
        }
        Slider {
            minimum:0;
            maximum: 100;
            value: 50;
            height: 100px;
            width: 20px;
            orientation: vertical;
            changed=>{root.volume=self.value;setvolume(root.volume)}
            
         }

    }
}
export component player{
    callback music_play();
    callback music-pause();
    callback music-last-next();
    in-out property <string> last-next;
    Rectangle {
        background: #4d4d4d81;
    }
    Image {
        ListArea := TouchArea {clicked => {values.click_audio1();
            if (values.show-list){
                values.show-list=false;
            }
            else{
                values.show-list=true;
            }
        }}
        source: @image-url("../assets/icon/music_list.svg");

        width: 40px;
        y: parent.height/3.2;
        x: parent.width*0.1;

        //colorize: ListArea.has-hover ? #cf2727 : #ffffff;
        colorize: #ffffff;
        animate colorize {
            duration: 250ms;
        }


    }
    Image {
        visible: !values.is-playing;
        PlayerArea := TouchArea { clicked => {
            root.music_play();
            values.is-playing=true;
            values.click_audio();
        
        }}
        source: @image-url("../assets/icon/play.svg");
        width: 30px;
        x:parent.width/2;
        y:parent.height/3.5;
        
        //colorize: ListArea.has-hover ? #cf2727 : #ffffff;
        colorize: #ffffff;
        animate colorize {
            duration: 250ms;
        }


    }
    Image {
        visible: values.is-playing;
        PauseArea := TouchArea { clicked => {
            root.music-pause();
            values.is-playing=false;
            values.click_audio();
        
        }}
        source: @image-url("../assets/icon/pause.svg");
        width: 25px;
        x:parent.width/2;
        y:parent.height/3.6;
        
        //colorize: ListArea.has-hover ? #cf2727 : #ffffff;
        colorize: #ffffff;
        animate colorize {
            duration: 250ms;
        }


    }
    Image {
        VolumeArea := TouchArea {clicked => {values.click_audio1();
            if (values.volume-setting){
                values.volume-setting=false;
            }
            else{
                values.volume-setting=true;
            }
        }}
        source: @image-url("../assets/icon/volume.svg");
        colorize: #ffffff;
        width: 40px;
        y: parent.height/3.2;
        x: parent.width*0.8;
    }
    Image {
        y: parent.height/3.5;
        x: parent.width*0.6;
        width: 40px;
        source: @image-url("../assets/icon/next.svg"); 
        colorize: #ffffff;
        TouchArea {clicked => {
            last-next="next";
            music-last-next()
        }}
    }
    Image {
        y: parent.height/3.5;
        x: parent.width*0.37;
        width: 40px;
        source: @image-url("../assets/icon/last.svg"); 
        colorize: #ffffff;
        TouchArea {clicked => {
            last-next="last";
            music-last-next()
        }}
    }
}

export component search{
    
    area := TouchArea {}
    Rectangle {
        background: #0c325281;
    }
    Image {
        source: @image-url("../assets/icon/search.svg");
        width: 15px;
        y: 15px;
        x: 15px;
        //colorize: area.has-hover ? #29292984 : #ffffff;
        colorize: #ffffff;

        // animate colorize {
        //     duration: 250ms;
        // }
        
    }
    TextInput {
        font-family: "方正少儿简体";
        font-size: 25px;
        width:  parent.width;
        height: parent.height;
        x:parent.width/5;
        y:parent.height/6;
    }


}

export global values {
    in-out property <bool> pane-visible:true;
    in-out property <bool> is-playing: false;

    property <bool> drag-area-pressed: false;
    // 记录按下的位置
    property <length> drag-area-down-x: 0;
    property <length> drag-area-down-y: 0;
    
    callback music_play();
    callback click_audio();
    callback click_audio1();
    callback music_pause();
    callback close-window();
    callback move-window(length, length);
    in-out property <bool> show-list;
    in-out property <bool> volume-setting;
}

export component AppWindow inherits Window {
    
    in-out property <bool> pane-visible:true;
    in-out property <bool> is-playing: false;
    no-frame: true;
    property <bool> drag-area-pressed: false;
    // 记录按下的位置
    property <length> drag-area-down-x: 0;
    property <length> drag-area-down-y: 0;
    
    callback music_play();
    callback music_pause();
    callback click_audio<=> values.click_audio;
    callback click_audio1<=> values.click_audio1;
    callback open_the_url(string);
    callback music_pause<=> values.music_pause;
    callback close-window();
    callback move-window(length, length);
    callback apply(UserSettingData);
    callback login(string,string);
    callback sign(SignData);
    callback musicupload(string,bool);
    callback test(string);
    callback choose-avatar();
    callback choose-music(musiclistdata);
    callback tryplay(musiclistdata);
    callback collect(musiclistdata);
    callback refresh();
    callback setvolume(int);
    callback cancel-tryplay();
    callback music-last-next(string);
    callback new-play-list(string,string,bool);
    callback init-play-list(string);
    callback init_collect();
    in-out property <string> user_name:"用户114514";
    in-out property <string> user_intro:"未登录";
    in-out property <string> user_gender:"未登录";
    in-out property <string> user_age:"未登录";
    in-out property <string> user-sign-date;
    in-out property <string> user-id;
    in-out property <string> user-avatar-path;
    in-out property <int> user_music_number:0;
    in-out property <bool> is-setting<=>SettingValue.is-setting;
    in-out property <bool> is-login:false;
    in-out property <bool> show-list<=>values.show-list;
    in-out property <image> user-avatar;
    in-out property <[musiclistdata]> play-list-content<=>play-list-values.play-list-music;

    in-out property <[{user:string,name:string,date:string,public:bool,id:string}]> musiclist;
    in-out property <[{user:string,name:string,date:string,public:bool,id:string}]> publicmusic;
    in-out property <[{cards:[CardList]}]> cards;
    in-out property <[{cards:[PlayList]}]> playlistcards;
    in-out property <string>avatar-path;

    in-out property <string> account;
    in-out property <string> password;
    
    title:"P-layer";
    icon: @image-url("../assets/icon/icon.png");
    preferred-width: 656px;
    preferred-height: 670px;
    callback showsetting();
    default-font-family: "方正少儿简体";
    //移动窗口
    Rectangle {
        
        x:0;
        y:0;
        height: 30px;
        width: parent.width;
        background: #5f121200;
        TouchArea {
            moved => {
                //根据移动的偏移量，设置窗口位置
                move-window(self.mouse-x - drag-area-down-x, self.mouse-y - drag-area-down-y);
                
            }
            pointer-event(ev) => {
                drag-area-pressed = ev.kind == PointerEventKind.down;
                drag-area-down-x = self.mouse-x;
                drag-area-down-y = self.mouse-y;
            }
        }
    }
    //触摸整个屏幕
    Rectangle {
        x:0;
        y:30px;
        width:root.width;
        height:root.height;
        TouchArea {
            clicked => {
                root.show-list=false;
                values.volume-setting=false;
            }
        }
    }
    Text {
        color: #3b3b3b;
        text: "CopyRightⒸPingfanH";
        font-size: 15px;
        y:parent.height/37;
        x:parent.width -229px;
    }
    Close{
        y:parent.height/37;
        x:parent.width -229px;
    
    }
    Button {
        //icon: @image-url("../assets/icon/xmark.svg");
        
        y:parent.height/40;
        x:parent.width -50px;
         width: 25px;
         height: 25px;
        
        clicked => {
        close-window();
        }
    }
    VerticalLayout {
        HorizontalLayout {
            visible: root.is-login;

            side-bar := SideBar {
                title: @tr("P-layer");
                model: [@tr("Menu" => "主页"), @tr("Menu" => "音乐库"), @tr("Menu" => "我的"), @tr("Menu" => "设置")];
                click-audio=>{root.click-audio()}
            }
    
            if(side-bar.current-item == 0) : homepage {
                
                test => {root.test("123")}
                width: 500px;
                open-url=>{root.open_the_url(self.url)}
            
            }
            if(side-bar.current-item == 1) : MusicLib {
                width: 500px;
                playlistcards<=>playlistcards;
                upload => {root.musicupload(self.music-name,self.is-public)}
                tryplay => {root.tryplay(self.othermusicdata)}
                cancel-tryplay => {root.cancel-tryplay()}
                collect => {root.collect(self.othermusicdata)}
                publicmusic<=>root.publicmusic;
                cards<=>root.cards;
                refresh=>{root.refresh();}
                new-play-list => {root.new-play-list(play-list-values.new-play-list-name,play-list-values.new-play-list-intro,play-list-values.new-play-list-public)}
                init-play-list=>{root.init-play-list(play-list-values.play-list-data.id)}
                init_collect=>{root.init_collect()}
            }
            if(side-bar.current-item == 2) : user-main {
                width: 500px;
                user-id:root.user-id;
                user-name:root.user_name;
                user-intro:root.user_intro;
                user-gender:root.user_gender;
                user-age:root.user_age;
                user-music-number:root.user_music_number;
                user-sign-date: root.user-sign-date;
                click_audio=>{root.click_audio();}
                click_audio1=>{root.click_audio1();}
                apply=>{root.apply({
                    name:self.setting-user-name,
                    gender:self.setting-user-gender,
                    age:self.setting-user-age,
                    intro:self.setting-user-intro,
                    avatar-path:self.avatar-path
                });}
                set-avatar => {root.choose-avatar()}
                avatar-path:root.avatar-path;
                user-avatar:root.user-avatar;
            }
            if(side-bar.current-item == 3) : setting {width: 500px;}
            // if(side-bar.current-item == 4) : AboutPage {}
        }
        player{
            visible: root.is-login;
            x:0px;
            padding-bottom: 0;
            height: 110px;
           // y:parent.height -130px;
            preferred-width: parent.width;
            music_play=>{root.music-play()}
            music-pause => {root.music-pause()}
            music-last-next => {music-last-next(self.last-next)}
        }  
    }

    animated := Rectangle {
        property <length> width-:400px;
        property <length> height-:10px;
        width: 100%;
        height: 100%;
        y: 200px;
        x:parent.x -120px;
        opacity: 0;
        states [
            visible when (root.show-list&&root.is-login) : {
                y: -60px;
                height-:450px;
                opacity: 1;
            in  {
                animate y,opacity,height- { duration: 250ms; easing: ease; }
            }
            out  {
                animate y,opacity,height- { duration: 250ms; easing: ease; }
            }
            }
        ]

        if (animated.y < root.height): MusicList {
            width: width-;
            height: height-;
            choose-music=>{root.choose-music(self.music-choosed);values.is-playing=true;root.is-playing=true}
            close=>{show-list=false;click-audio()}
            background: #000000;
            musiclist:root.musiclist;
            
        }
    }
    animated1 :=Rectangle{
        width: 100%; height: 100%;
       // y: parent.height;
        x: parent.width;
        y:0;
        opacity: 0;
        
        states [
            visible when (!root.is-login) : {
                width:100%;
                opacity:1;
                y: 0;
                x: 0;
            in  {
                animate width,x { duration: 400ms; easing: ease; }
                animate opacity { duration: 100ms; easing: ease; }
            }
            out  {
                animate width,x { duration: 400ms; easing: ease; }
                animate opacity { duration: 200ms; easing: ease; }
            }
            }
        ]

        if (animated1.y < root.height): Login {
            width-:parent.width;
            height-:parent.height/2;
            login=>{
                root.is-login=true;
                root.account=self.account;
                root.password=self.password;
                root.login(root.account,root.password);
            }
            signup=>{root.sign({
                account:self.sign-account,
                password:self.sign-password,
                name:self.sign-name,
                gender:self.sign-gender,
                age:self.sign-age,
                intro:self.sign-intro,
                avatarpath:root.avatar-path
            });
            
            root.user-name=self.sign-name;
            root.user-age=self.sign-age;
            root.user-intro=self.sign-intro;
            root.user-gender=self.sign-gender;
            root.user-music-number=0;
            root.user-sign-date="";
        }
        choose-avatar => {root.choose-avatar();}
        avatar-path: avatar-path;
            //back => { root.show-list = false;click_audio1()}
            background: #1C1C1C;
            click-audio => {root.click-audio()}
            click-audio1 => {root.click-audio1()}
        }
    }
    animated-volume := Rectangle {
        //background: #0000002c;
        property <length> width-:400px;
        property <length> height-:10px;
        width: 100%;
        height: 100%;
        y: 190px;
        x:parent.x +213px;
        opacity: 0;
        states [
            visible when (values.volume-setting&&root.is-login) : {
                y: 120px;
                height-:450px;
                opacity: 1;
            in  {
                animate y,opacity,height- { duration: 250ms; easing: ease; }
            }
            out  {
                animate y,opacity,height- { duration: 250ms; easing: ease; }
            }
            }
        ]

        if (animated-volume.y < root.height): setvolume {
            setvolume => {root.setvolume(self.volume)}
        }
    }
}
