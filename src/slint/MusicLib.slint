import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox, TabWidget
} from "std-widgets.slint";
import { musiclistdata } from "list.slint";
export component Upload{ 
    in-out property <string> music-name;
    callback upload(string,bool);
    callback cancel();
    in-out property <bool> is-public;
    in-out property <bool> view-public;
    Text {
        y:parent.height*0.1 -20px;
        text: "默认使用文件名";
    }
    name:=LineEdit {
        y:parent.height*0.1;
        width: parent.width*0.5;
        text: music-name;
        placeholder-text: "音乐名称";
        edited => {music-name=self.text}
    }
    Rectangle {
        hover:=TouchArea {}
        y:parent.height*0.1 +40px;
        width:80px;
        height:30px;
        CheckBox {
            x: 0;
            toggled => {
                if(is-public){
                    is-public=false
                }
                else{
                    is-public=true
                }
            }
            width:20px;
            height:20px;
            text: "公开";
        }
        publictext:=Text{
            visible: is-public;
            y:parent.height;
            x:0;
            text: "其他人可以在音乐馆看到你上传的音乐！";
        }
        Text {
            visible: (hover.has-hover?true:false)&&!is-public;
            //y:parent.height*0.3;
            x:parent.width;
            text: "是否在音乐馆可见";
        }
    }

    


    upload:=Button{
        y:parent.height*0.1 +100px;
        width: parent.width*0.3;
        text: "上传音乐";
        clicked => {root.upload(music-name,root.is-public);name.text=""}
    }
    Button{
        width: 100px;
        text: "返回";
        y:parent.height*0.1 +150px;
        clicked => {root.cancel();}
    }

}

export component ChooseMusic{
    in-out property <bool>is-choose;
    in-out property <musiclistdata>othermusicdata;
    callback tryplay(musiclistdata);
    callback collect(musiclistdata);

    Rectangle {
        width: 300px;
        height: 200px;
        background: #000000;
        function choose-name(text:string) ->string{
                    
            return text+"\n上传者:"+othermusicdata.user;
        }
        TouchArea {}
        Text {y:10px;text: choose-name(othermusicdata.name);}
        Button {
            x: 0;
            text: "加入列表";
            clicked => {collect({
                user:othermusicdata.user,
                name:othermusicdata.name,
                date:othermusicdata.date
            })}
        }
        Button {
            x: parent.width*0.8;
            text: "试听";
            clicked => {tryplay({
                user:othermusicdata.user,
                name:othermusicdata.name,
                date:othermusicdata.date
            })}
        } 
        Button {
            text: "返回";
            clicked => {is-choose=false}
        }
    }

}

export component PublicMusicList {
    in-out property <bool>is-choose;
    in-out property <musiclistdata>othermusicdata;
    callback tryplay(musiclistdata);
    callback collect(musiclistdata);
    in-out property <[{user:string,name:string,date:string,public:bool}]> publicmusic;
            ListView {
            for data in publicmusic: Rectangle {
                listtouch:=TouchArea{
                    clicked => {is-choose=true;
                        othermusicdata={
                        user:data.user,
                        name:data.name,
                        date:data.date
                    };}
                }
            height: 40px;
            width: parent.width;
           
            Text {
                function textss(text:string) ->string{
                    
                    return text+" || 上传者:"+data.user+" || 日期:"+data.date;
                }
                //x: 0;
                text: textss(data.name);

                color: listtouch.has-hover?#8d8d8d:#ffffff;
                animate color { 
                    duration:200ms;
                 }
            }
        }
}
    animated := Rectangle {
        width: parent.width; height: parent.height;
        y: parent.height;
        states [
            visible when (root.is-choose) : {
                y: 0;
            in  {
                animate y { duration: 200ms; easing: ease; }
            }
            out  {
                animate y { duration: 200ms; easing: ease; }
            }
            }
        ]

        if (animated.y < root.height):ChooseMusic{
            is-choose<=>root.is-choose;
            width: parent.width;
            height: parent.height;
            othermusicdata<=>root.othermusicdata;
            tryplay => {tryplay(self.othermusicdata)}
            collect => {collect(self.othermusicdata)}
        }
    }
}
export component MusicLib {
    in-out property <string> music-name;
    callback upload(string,bool);
    callback tryplay(musiclistdata);
    callback refresh();
    callback collect(musiclistdata);

    in-out property <musiclistdata>othermusicdata;
    in-out property <bool>is-uploading;
    in-out property <bool> is-public;
    in-out property <[{user:string,name:string,date:string,public:bool}]> publicmusic;

    TabWidget {
        Tab{
            title: "公开音乐";
            Button {
                text: "上传音乐";
                x:parent.width*0.7;
                y:0;
                width: 100px;
                height: 40px;
                visible: !is-uploading;
                clicked => {root.is-uploading=true;}
            }
            Button {
                text: "刷新列表";
                x:parent.width*0.3;
                y:0;
                width: 100px;
                height: 40px;
                visible: !is-uploading;
                clicked => {root.refresh();}
            }
            PublicMusicList {
                y: 40px;
                visible: !is-uploading;
                width:100%;
                height:100%;
                publicmusic<=>publicmusic;
                tryplay => {
                    root.othermusicdata=self.othermusicdata;
                    tryplay(self.othermusicdata);
                }
                collect => {
                    root.othermusicdata=self.othermusicdata;
                    collect(self.othermusicdata);
                }
                
            }
        }
        Tab{
             title: "我的歌单";
        }
    }
   


    animated := Rectangle {
        width: parent.width; height: parent.height;
        y: parent.height;
        states [
            visible when (root.is-uploading) : {
                y: 0;
            in  {
                animate y { duration: 200ms; easing: ease; }
            }
            out  {
                animate y { duration: 200ms; easing: ease; }
            }
            }
        ]

        if (animated.y < root.height):Upload{
            upload => {
                root.is-public=self.is-public;
                root.upload(self.music-name,self.is-public);}
            width: parent.width;
            height: parent.height;
            cancel => {root.is-uploading=false}
        }
 }
}
